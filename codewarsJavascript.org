#+TITLE: AwalÃ©

#+begin_src js :results output

const reverseLetter = envoi => {
    envoi = envoi.replace(/[^a-zA-Z]/g, '');
    return [...envoi].reverse().join('');
}

console.log(reverseLetter('rd2d'));
#+end_src

#+RESULTS:
: ddr

#+begin_src js :results output

principal = 1000.0;
interet = 0.05;
taxe = 0.18;
total = principal + principal*interet - (principal*interet*taxe)
console.log(principal, total);

const nombreAnnee = (principal, objectif, interet, taxe) => {
    let nombre = 0;

    while(principal < objectif){
	principal = principal + principal*interet - (principal*interet*taxe);
	nombre +=1;
    }
    
    return  objectif === principal ? 0 : nombre;
};

console.log(nombreAnnee(principal, 1100, 0.05, 0.18));

#+end_src

#+RESULTS:
: 1000 1041
: 3
#+begin_src js :results output

const rainAmount = (mm) => {
    return mm >= 40 ? "Your plant has had more than enough water for today!" : `You need to give your plant ${40 - mm}mm of water`;
}

#+end_src


#+begin_src js :results output
const chaine = valeur => {

return `1 * ${valeur} = ${valeur * 1}\n2 * ${valeur} = ${valeur * 2}\n3 * ${valeur} = ${valeur * 3}\n4 * ${valeur} = ${valeur * 4}\n5 * ${valeur} = ${valeur * 5}\n6 * ${valeur} = ${valeur * 6}\n7 * ${valeur} = ${valeur * 7}\n8 * ${valeur} = ${valeur * 8}\n9 * ${valeur} = ${valeur * 9}\n10 * ${valeur} = ${valeur * 10}`;
}

console.log(chaine(12));
#+end_src

#+RESULTS:
#+begin_example
1 * 12  = 12

2 * 12  = 24

3 * 12  = 36

4 * 12  = 48

5 * 12  = 60

6 * 12  = 72

7 * 12  = 84

8 * 12  = 96

9 * 12  = 108

10 * 12  = 120
#+end_example


#+begin_src js :results output

a = 'code';
// maju = [...a].filter((x) => x  === x.match(/A-Z/g));
// minu = [...a].filter((x) => x  === x.match(/a-z/g));

maju = [...a].filter((x) => /[A-Z]/.test(x));
minu = [...a].filter((x) => /[a-z]/.test(x));
nombreMajuscules = maju.length ? maju.length : 0;
nombreMajuscules = minu.length ? minu.length : 0;

//console.log(maju, minu, maju.length, minu.length);

const fix_string_case = chaine => {
maju = [...chaine].filter((x) => /[A-Z]/.test(x));
minu = [...chaine].filter((x) => /[a-z]/.test(x));
nombreMajuscules = maju.length ? maju.length : 0;
nombreMinuscules = minu.length ? minu.length : 0;
return nombreMajuscules === nombreMinuscules ? chaine.toLowerCase() : nombreMajuscules > nombreMinuscules ? chaine.toUpperCase() : chaine.toLowerCase();
};

console.log(fix_string_case('code'));
console.log(fix_string_case('CODe'));
console.log(fix_string_case('COde'));
console.log(fix_string_case('Code'));
#+end_src

#+RESULTS:
: code
: CODE
: code
: code


#+begin_src js :results output

const sayHello = (name, city, state) => `Hello, ${name.join(' ')}! Welcome to ${city}, ${state}!`;

console.log(sayHello(['John', 'Smith'], 'Phoenix', 'Arizona'));

#+end_src

#+RESULTS:
: Hello, John Smith! Welcome to Phoenix, Arizona!


#+begin_src js :results output

const busStops = (liste) => {
    let montees = liste.map(x => x[0]).reduce((accumulateur, valeur) => accumulateur + valeur, 0);
    let descentes = liste.map(x => x[1]).reduce((accumulateur, valeur) => accumulateur + valeur, 0);
    return montees - descentes;
    
    };

#+end_src


#+begin_src js :results output

// const torial = valeur => {
//     int total = 0;
//     if (valeur === 1){
// 	return total;
//     }

// }

function toto(valeur){
    return valeur === 1 ? valeur : valeur * toto(valeur - 1)
}


console.log(toto(5));

const totorial = valeur => valeur === 1 ? valeur : valeur * totorial(valeur - 1);	

console.log(totorial(5));
#+end_src

#+RESULTS:
: 120
: 120

#+begin_src js :results output

function toto(valeur){
    return (valeur != 1) ? valeur * toto(valeur - 1) : 1;
}

console.log(toto(5));
#+end_src

#+RESULTS:
: 120


#+begin_src js :results output

a = [1, 3, 4 , 6, 10];
console.log(Math.max(...a));
#+end_src

#+RESULTS:
: 10

#+begin_src js :results output
a = [1, 3, 4 , 6, 10];
// mini = a.reduce((a,b) => a < b ? a : b);
// maxi = a.reduce((a,b) => a > b ? a : b);

mini = a.reduce((x,y) => x < y ? x : y);
maxi = a.reduce((x,y) => x > y ? x : y);

//const getMini = envoi => envoi.reduce((a,b) => a < b ? a : b);
console.log(mini, maxi);

// const sumOfMinimums = envoi => {
//     let tri = envoi.map((x) => getMini(x));
//     return tri;
// }

//console.log(sumOfMinimums([7, 9, 8, 6, 2]));
#+end_src

#+RESULTS:
: 1 10
#+begin_src js :results output
let li = [1, 3, 4 , 6, 10];
let tt = [[7, 9, 8, 6, 2], [6, 3, 5, 4, 3], [5, 8, 7, 4, 5]];
console.log(li.reduce((x,y) => x > y ? x : y));

const getMi = envoi => envoi.reduce((x,y) => x > y ? x : y);
let tts = tt.map(getMi).reduce((x,y) => x + y, 0);
console.log(getMi([1, 3, 4 , 6, 10]));
console.log(tts);
#+end_src

#+RESULTS:
: 10
: 10
: 23
#+begin_src js :results output
//const getMi = envoi => envoi.reduce((x,y) => x > y ? x : y);

const sumOfMinimums = liste => {
    const getMini = envoi => envoi.reduce((x,y) => x < y ? x : y);
    let valeurs = liste.map(getMini);
    let somme = valeurs.reduce((acc, x) => acc + x, 0);
    return somme;
};


console.log(sumOfMinimums([[7, 9, 8, 6, 2], [6, 3, 5, 4, 3], [5, 8, 7, 4, 5]]));
#+end_src

#+RESULTS:
: 9e

#+begin_src js :results output

let a = "5123";

//console.log(/^[123]/.test(a));

const validateCode = code => /^[1-5]/.test(code);

console.log(validateCode(4345));
#+end_src

#+RESULTS:
: true


#+begin_src js :results output

let a = [7, 9, 8, 6, 2]
let a2 = [...a].sort((x,y) => x - y);
let a3 = [...a].sort((x,y) => y - x);
console.log(a2);
console.log(a3, a3[0]+a3[1]); 

const largestPairSum = numbers => {
let tri = [...numbers].sort((x,y) => y - x);
    return tri[0]+tri[1];
};

console.log(largestPairSum([10,14,2,23,19]));
#+end_src

#+RESULTS:
: [ 2, 6, 7, 8, 9 ]
: [ 9, 8, 7, 6, 2 ] 17
: 42

#+begin_src python :results output
import numpy as np
#a = list(range(50,-51, -1))
# a = np.arange(50,-51,-1)
a = [55, 95, 62, 36, 48]
moyenne = np.mean(a)
somme = np.sum(a)
#print(np.mean(a), np.sum(a))
b = [round(moyenne - x, 2) for x in a]
print(b)
print(sum(a)/len(a), moyenne)
#+end_src

#+RESULTS:
: [-4.2, 35.8, 2.8, -23.2, -11.2]
: 59.2 59.2
#+begin_src python :results output

a = [20,10,-80,10,10,15,35]
print(sum(a), sum(a)/len(a))
#+end_src

#+RESULTS:
: 20 2.857142857142857

#+begin_src js :results output

const multiple_p = (index, valeur) => index == 0 & valeur == 0 ? true : index % valeur == 0; // | index == 0 && valeur == 0;

const multipleOfIndex = array => {
    let tri = array.filter((x,index) => multiple_p(x, index));
    return tri;
};

console.log(multipleOfIndex([22, -6, 32, 82, 9, 25]));
console.log(multipleOfIndex([68, -1, 1, -7, 10, 10]));
console.log(multipleOfIndex([0,2,3,6,9]));
#+end_src

#+RESULTS:
: [ -6, 32, 25 ]
: [ -1, 10 ]
: [ 0, 2, 6 ]


#+begin_src js :results output

const cockroachSpeed = v => {
    // km/h : 1000m/3600s
    // cm/s : 100000/3600 == 1000/36 = 500/18 = 250 / 9
    return Math.floor(v * 250 / 9)
}

console.log(cockroachSpeed(1.08));
console.log(cockroachSpeed(1.09));
console.log(cockroachSpeed(0));

#+end_src

#+RESULTS:
: 30
: 30
: 0

#+begin_src js :results output

const isSortedAndHow = array => {
    const _ascending = structuredClone(array).sort((a,b) => a - b);
    const _descending = structuredClone(array).sort((a,b) => b - a) ;
    const ascending = JSON.stringify(array) === JSON.stringify(_ascending);
    const descending = JSON.stringify(array) === JSON.stringify(_descending);    
    //return ascending ? true : descending ? true : false;
    //console.log(_ascending, _descending, JSON.stringify(_ascending), JSON.stringify(_descending));
    //let retour = ascending ? 'ascending' : descending ? 'descending' : 'no';
    return ascending ? "yes, ascending" : descending ? "yes, descending" : 'no';
    //return retour;
    //return _ascending;

};

console.log(isSortedAndHow([1,20,3]));
console.log(isSortedAndHow([1,5,2,4,9]));
console.log(isSortedAndHow([31,25,22,14,9]));
console.log(isSortedAndHow([1,2,4,9]));
#+end_src

#+RESULTS:
: no
: no
: yes, descending
: yes, ascending

#+begin_src js :results output
const evenNumbers = (array, number) => array.filter((x) => x%2 === 0).slice(-number);

console.log(evenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9], 3));
//console.log([1, 2, 3, 4, 5, 6, 7, 8, 9][:3]);
//a = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//console.log(a.slice(-2));
#+end_src

#+RESULTS:
: [ 4, 6, 8 ]

#+begin_src js :results output

a = "1,2,3";
//console.log(a.split(",").slice(1,-1).join(" "));

// const array = liste => {
//     let x = liste.split(",").slice(1,-1).join(" ");
//     return x ? x : null;
// };

const array = liste => liste.split(",").slice(1,-1).join(" ") || null;
console.log(array("1"));
console.log(array("1,2,3,4,5,6"));
#+end_src

#+RESULTS:
: null
: 2 3 4 5


#+begin_src js :results output
const arithmetic = (a,b, operator) => {

    let retour = 0;

    switch(operator){
    case 'add':
	retour = a + b;
	break;
    case 'subtract':
	retour = a - b;
	break;
    case 'multiply':
	retour = a * b;
	break;
    case 'divide':
	retour = a / b;
	break;
    }

    return retour;
}

console.log(arithmetic(13,15,'multiply'));
console.log(arithmetic(8,2,'subtract'));
#+end_src

#+RESULTS:
: 195
: 6

#+begin_src js :results output

const arithmetic = (a, b, operator) => ({
  'add'     : a + b,
  'subtract': a - b,
  'multiply': a * b,
  'divide'  : a / b
}[operator]);

console.log(arithmetic(13,15,'multiply'));
console.log(arithmetic(8,2,'subtract'));

#+end_src

#+RESULTS:
: 195
: 6


#+begin_src js :results output

function arithmetic(a, b, operator){
  return ops[operator](a, b);
}

const ops = {
  "add"      : (a, b) => a + b,
  "subtract" : (a, b) => a - b,
  "multiply" : (a, b) => a * b,
  "divide"   : (a, b) => a / b
}

console.log(arithmetic(13,15,'multiply'));
console.log(arithmetic(8,2,'subtract'));


#+end_src

#+RESULTS:
: 195
: 6

#+begin_src js :results output
chaine = 'abcdefgh';
liste = [...chaine]
deux = liste[1]
dernier = liste[liste.length - 1];
console.log('a'.codePointAt(0));
console.log(chaine[1], chaine[chaine.length - 1]);
console.log(deux, dernier);
#+end_src
 
#+RESULTS:
: 97
: b h
: b h

#+begin_src js :results output
const secret = chaine => {
    //let chaine = [..._chaine];
    //console.log(chaine);
    let tete = chaine[0].codePointAt(0);
    let deux = chaine[1] || '';
    let dernier = chaine.length > 1 ? chaine[chaine.length - 1] : '';
    //let reste = chaine.length > 1 ? chaine.slice(2, chaine.length - 1) : '';
    //let reste = chaine.length === 2 ? chaine[1] : chaine.length > 2 ? chaine.slice(2, chaine.length - 1) : '';
    let reste = chaine.length === 2 ? chaine[1] : chaine.slice(2,chaine.length -1);
    //console.log(chaine, tete, deux, dernier);
    console.log(chaine, tete, dernier, reste, deux);
    // chaine[1] = dernier;
    // dernier = deux;
    // let retour = [tete, chaine.slice(1)]
    //return retour.join('');
    return [tete,dernier,reste, deux].join('');
};

const encryptThis = text => {
let mots = text.split(' ').map(secret);
    return mots.join(' ');
};

console.log(encryptThis("A wise old owl lived in an oak"));
#+end_src

#+RESULTS:
: A 65   
: wise 119 e s i
: old 111 d  l
: owl 111 l  w
: lived 108 d ve i
: in 105 n n n
: an 97 n n n
: oak 111 k  a
: 65 119esi 111dl 111lw 108dvei 105nnn 97nnn 111ka


#+begin_src js :results output

//let a = 'albertine';
//let a = 'un';
//console.log(a[0], a[a.length - 1]);

const secret = chaine => {
    let retour = null;
    let taille = chaine.length;
    let tete = chaine[0].codePointAt(0);

    switch(taille){
    case 1:
	//retour = chaine[0].codePointAt(0);
	//let tete = chaine[0].codePointAt(0);
	retour = tete;
	break;

    case 2:
	//retour = [chaine[0].codePointAt(0), chaine[1]].join('');
	//let tete = chaine[0].codePointAt(0);
	retour = [tete, chaine[1]].join('');
	break;

    default:
	//let taille = chaine.length;
	//let tete = chaine[0].codePointAt(0);
	let dernier = chaine[taille - 1];
	let deuxieme = chaine[1];
	let reste = chaine.slice(2, taille -1);
	//console.log(chaine, dernier, reste, deuxieme);
	//retour = [chaine[0].codePointAt(0), chaine[chaine.length-1], chaine.slice(1,chaine.length-1), chaine[1]].join('');
	retour = [tete, dernier, reste, deuxieme].join('');
	break;
    }
    return retour;
};


const encryptThis = text => {
let mots = text.split(' ').map(secret);
    return mots.join(' ');
};


console.log(secret('A'));
console.log(secret('Ab'));
console.log(secret('About'));
console.log(secret('in'));
console.log(secret('an'));
console.log(secret('oak'));

console.log(encryptThis("A wise old owl lived in an oak"));
#+end_src

#+RESULTS:
: 65
: 65b
: 65toub
: 105n
: 97n
: 111ka
: 65 119esi 111dl 111lw 108dvei 105n 97n 111ka

#+begin_src js :results output
const encodeur = chaine => {
    let retour = null;
    let taille = chaine.length;
    let tete = chaine[0].codePointAt(0);

    switch(taille){
    case 1:
	retour = tete;
	break;

    case 2:
	retour = [tete, chaine[1]].join('');
	break;

    default:
	let dernier = chaine[taille - 1];
	let deuxieme = chaine[1];
	let reste = chaine.slice(2, taille -1);
	retour = [tete, dernier, reste, deuxieme].join('');
	break;
    }
    return retour;
};


const encryptThis = text => {
let mots = text.split(' ').map(encodeur);
    return mots.join(' ');
};

console.log(encryptThis("A wise old owl lived in an oak"));
#+end_src

#+RESULTS:
: 65 119esi 111dl 111lw 108dvei 105n 97n 111ka
#+begin_src js :results output

let a = [1,2,3,4,5].reduce((accu, valeur) => accu + valeur, 0);
console.log(a);
#+end_src

#+RESULTS:
: 15
#+begin_src js :results output

const digitalRoot = n => {
    let somme = [...String(n)].reduce((accu, valeur) => accu + valeur, 0);
    return String(somme).length === 1 ? somme : digitalRoot(somme);
};

console.log(digitalRoot(16));
#+end_src

#+RESULTS:


#+begin_src js :results output

const digitalRoot = n => {
    let somme = [...String(n)].map(x => parseInt(x, 10)).reduce((accu, valeur) => accu + valeur, 0);
    return String(somme).length === 1 ? somme : digitalRoot(somme)
};

console.log(digitalRoot(16));
#+end_src

#+RESULTS:
: 7

#+begin_src js :results output

const add = (_a,_b) => {
    let ta = _a.length;
    let tb = _b.length;
    let a = _a.padStart(Math.max(ta,tb) + 1,'0').split('').reverse().join('');
    let b = _b.padStart(Math.max(ta,tb) + 1,'0').split('').reverse().join('');
    
    //console.log(ta,tb, Math.max(ta,tb));
    console.log(_a, a);
    console.log(_b, b);
    console.log(a);
    console.log(b);

    let retenue = 0;
    
    let chaine = [...a].reduce((acc, valeur, index) => {
	let somme = parseInt(a[index],10) + parseInt(b[index],10) + retenue;
	retenue = somme > 9 ? 1 : 0;
	somme = retenue === 0 ? somme : somme - 10;
	acc.push(String(somme));
	return acc;
    }, []);
    
    console.log(chaine, parseInt(chaine.reverse().join(''), 10));
};




//console.log(add('63829983432984289347293874', '90938498237058927340892374089'));
console.log(add('123','45678'));

#+end_src

#+RESULTS:
: 123 321000
: 45678 876540
: 321000
: 876540
: [ '0', '4', '5', '8', '0', '1' ] 45801
: undefined

#+begin_src js :results output

console.log(123 + 45678);
#+end_src

#+RESULTS:
: 45801

#+begin_src js :results output

const add = (_a,_b) => {
    let ta = _a.length;
    let tb = _b.length;
    //Pour avoir deux chaÃ®nes de mÃªme longueur
    //Les chaÃ®nes sont inversÃ©es, elles seront traversÃ©es de gauche Ã  droite
    let a = _a.padStart(Math.max(ta,tb) + 1,'0').split('').reverse().join('');
    let b = _b.padStart(Math.max(ta,tb) + 1,'0').split('').reverse().join('');

    //retenue de chaque addition
    let retenue = 0;
    
    let chaine = [...a].reduce((acc, valeur, index) => {
	let somme = parseInt(a[index],10) + parseInt(b[index],10) + retenue;
	retenue = somme > 9 ? 1 : 0;
	somme = retenue === 0 ? somme : somme - 10;
	acc.push(somme);
	return acc;
    }, []);

    //console.log(chaine);
    // L'addition des deux chaÃ®nes est finalement  retournÃ©e puis convertie en entier
    retour = chaine.reverse().join('');
    return retour.startsWith('0') ? retour.slice(1) : retour;
    //return retour;
    //return parseInt(chaine.reverse().join(''), 10);
};

console.log(add("101", "100"), "201");
console.log(add("888", "222"), "1110");
console.log(add('63829983432984289347293874', '90938498237058927340892374089'), "91002328220491911630239667963");
  
#+end_src

#+RESULTS:
: 201 201
: 1110 1110
: 91002328220491911630239667963 91002328220491911630239667963


#+begin_src js :results output

a = 'a a b b b c d d e e f';
let nombre = a.split('').filter(x => x != ' ').reduce((accu, valeur) =>  accu.has(valeur) ?
				accu.set(valeur, accu.get(valeur) + 1) :
				accu.set(valeur, 1), new Map());
//let bilan = [... new Set(nombre.keys())];
//let bilan = Object.keys(nombre.sort().reduce((a,b) => (a[k] = map[a], b), {});
//let bilan = Object.keys(nombre).sort((a,b) => a - b);
//console.log([...nombre.values()]);
//console.log(bilan);
//console.log([...nombre.entries()]);
let tri = Array.from(nombre).sort((a,b) => b[1] - a[1]);
console.log(tri.slice(0,3));
#+end_src

#+RESULTS:
: [ [ 'b', 3 ], [ 'a', 2 ], [ 'd', 2 ] ]

#+begin_src js :results output

const topThreeWords = text => {

    //let tri = nettoyage.split(' ').filter(x => x != ' ').map(x => x.toLowerCase()); //suppression des espaces
    let nettoyage = text.replace(/[^a-zA-Z' ]/g, '');
    let tri = nettoyage.split(' ').filter(x => x != '').map(x => x.toLowerCase()); //suppression des espaces
    let occurences = tri.reduce((accu, mot) => accu.has(mot) ? accu.set(mot, accu.get(mot) + 1) : accu.set(mot, 1), new Map());
    let classement = Array.from(occurences).sort((a,b) => b[1] - a[1]).map(x => x[0]).filter(x => /[a-zA-Z]/.test(x));
    return classement[0] ? classement.slice(0,3) : [];
    //console.log(classement);
    //return classement.map(x => x[0]);
};

//console.log(topThreeWords('a a b b b c d d e e f'));
//console.log(topThreeWords("a a a  b  c c  d d d d  e e et0  e e"));
//console.log(topThreeWords("e e e e DDD ddd DdD: ddd d aa aA Aa, bb cc cC e e e"));//, ['e','ddd','aa']));
console.log(topThreeWords("  , e   .. ", ["e"]));
console.log(topThreeWords("  '  ", []));
#+end_src

#+RESULTS:
: [ 'e' ]
: []
